{"ast":null,"code":"import axios from '../helpers/axios';\nimport { categoryConstants } from './constants';\nexport const createCategory = form => {\n  return async dispatch => {\n    dispatch({\n      type: categoryConstants.CREATE_NEW_CATEGORIES_REQUEST\n    });\n\n    try {\n      const res = await axios.post('/category/create', form);\n\n      if (res.status === 201) {\n        dispatch({\n          type: categoryConstants.CREATE_NEW_CATEGORIES_SUCCESS,\n          payload: {\n            category: res.data.category\n          }\n        });\n      } else {\n        dispatch({\n          type: categoryConstants.CREATE_NEW_CATEGORIES_FAILED,\n          payload: res.data.error\n        });\n      }\n    } catch (error) {\n      console.log(error.response);\n    }\n  };\n};\n\nconst getCategory = () => {\n  return async dispatch => {\n    dispatch({\n      type: categoryConstants.GET_ALL_CATEGORIES_REQUEST\n    });\n    const res = await axios.get(\"/category/getCategories\");\n\n    if (res.status === 200) {\n      const {\n        categoryList\n      } = res.data;\n      dispatch({\n        type: categoryConstants.GET_ALL_CATEGORIES_SUCCESS,\n        payload: {\n          categories: categoryList\n        }\n      });\n    } else {\n      dispatch({\n        type: categoryConstants.GET_ALL_CATEGORIES_FAILED,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n};\n\nexport const updateCategories = form => {\n  return async dispatch => {\n    dispatch({\n      type: categoryConstants.UPDATE_CATEGORIES_REQUEST\n    });\n    const res = await axios.post(\"/category/update\", form);\n\n    if (res.status === 201) {\n      dispatch({\n        type: categoryConstants.UPDATE_CATEGORIES_SUCCESS\n      });\n      dispatch(getCategory());\n    } else {\n      const {\n        error\n      } = res.data;\n      dispatch({\n        type: categoryConstants.UPDATE_CATEGORIES_FAILURE,\n        payload: {\n          error\n        }\n      });\n    }\n  };\n};\nexport const deleteCategories = ids => {\n  return async dispatch => {\n    dispatch({\n      type: categoryConstants.DELETE_CATEGORIES_REQUEST\n    });\n    const res = await axios.post(\"/category/delete\", {\n      payload: {\n        ids\n      }\n    });\n\n    if (res.status === 201) {\n      dispatch(getCategory());\n      dispatch({\n        type: categoryConstants.DELETE_CATEGORIES_SUCCESS\n      });\n    } else {\n      const {\n        error\n      } = res.data;\n      dispatch({\n        type: categoryConstants.DELETE_CATEGORIES_FAILURE,\n        payload: {\n          error\n        }\n      });\n    }\n  };\n};\nexport { getCategory };","map":{"version":3,"sources":["C:/Users/zubai/OneDrive/Documents/GitHub/janimotors1/admin-dashboard/src/actions/category.action.js"],"names":["axios","categoryConstants","createCategory","form","dispatch","type","CREATE_NEW_CATEGORIES_REQUEST","res","post","status","CREATE_NEW_CATEGORIES_SUCCESS","payload","category","data","CREATE_NEW_CATEGORIES_FAILED","error","console","log","response","getCategory","GET_ALL_CATEGORIES_REQUEST","get","categoryList","GET_ALL_CATEGORIES_SUCCESS","categories","GET_ALL_CATEGORIES_FAILED","updateCategories","UPDATE_CATEGORIES_REQUEST","UPDATE_CATEGORIES_SUCCESS","UPDATE_CATEGORIES_FAILURE","deleteCategories","ids","DELETE_CATEGORIES_REQUEST","DELETE_CATEGORIES_SUCCESS","DELETE_CATEGORIES_FAILURE"],"mappings":"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","sourcesContent":["import axios from '../helpers/axios'\nimport { categoryConstants } from './constants'\n\nexport const createCategory = (form) => {\n  return async (dispatch) => {\n    dispatch({ type: categoryConstants.CREATE_NEW_CATEGORIES_REQUEST })\n    try {\n      const res = await axios.post('/category/create', form)\n      if (res.status === 201) {\n        dispatch({\n          type: categoryConstants.CREATE_NEW_CATEGORIES_SUCCESS,\n          payload: { category: res.data.category },\n        })\n      } else {\n        dispatch({\n          type: categoryConstants.CREATE_NEW_CATEGORIES_FAILED,\n          payload: res.data.error,\n        })\n      }\n    } catch (error) {\n      console.log(error.response);\n    }\n  };\n};\n\nconst getCategory = () => {\n  return async (dispatch) => {\n    dispatch({ type: categoryConstants.GET_ALL_CATEGORIES_REQUEST });\n    const res = await axios.get(\"/category/getCategories\");\n\n    if (res.status === 200) {\n      const { categoryList } = res.data;\n      dispatch({\n        type: categoryConstants.GET_ALL_CATEGORIES_SUCCESS,\n        payload: { categories: categoryList },\n      });\n    } else {\n      dispatch({\n        type: categoryConstants.GET_ALL_CATEGORIES_FAILED,\n        payload: { error: res.data.error },\n      });\n    }\n  };\n};\n\nexport const updateCategories = (form) => {\n  return async (dispatch) => {\n    dispatch({ type: categoryConstants.UPDATE_CATEGORIES_REQUEST });\n    const res = await axios.post(`/category/update`, form);\n    if (res.status === 201) {\n      dispatch({ type: categoryConstants.UPDATE_CATEGORIES_SUCCESS });\n      dispatch(getCategory());\n    } else {\n      const { error } = res.data;\n      dispatch({\n        type: categoryConstants.UPDATE_CATEGORIES_FAILURE,\n        payload: { error }\n      });\n    }\n  };\n};\n\nexport const deleteCategories = (ids) => {\n  return async dispatch => {\n    dispatch({ type: categoryConstants.DELETE_CATEGORIES_REQUEST });\n    const res = await axios.post(`/category/delete`, {\n      payload: {\n        ids\n      }\n    });\n    if (res.status === 201) {\n      dispatch(getCategory());\n      dispatch({ type: categoryConstants.DELETE_CATEGORIES_SUCCESS });\n    } else {\n      const { error } = res.data;\n      dispatch({\n        type: categoryConstants.DELETE_CATEGORIES_FAILURE,\n        payload: { error }\n      });\n    }\n  };\n};\n\nexport {\n  getCategory\n}"]},"metadata":{},"sourceType":"module"}