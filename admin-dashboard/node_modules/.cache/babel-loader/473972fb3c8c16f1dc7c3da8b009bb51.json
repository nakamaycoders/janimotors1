{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zubai\\\\OneDrive\\\\Documents\\\\GitHub\\\\janimotors1\\\\admin-dashboard\\\\src\\\\views\\\\pages\\\\Category\\\\Category.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport { createCategory, updateCategories, deleteCategories as deleteCategoriesAction, getCategory } from '../../../actions';\nimport ReusableModel from '../../../components/layouts/ReusableModel';\nimport CheckboxTree from 'react-checkbox-tree';\nimport 'react-checkbox-tree/lib/react-checkbox-tree.css';\nimport UpdateCategoryModel from './UpdateCategoryModel';\nimport AddCategoryModel from './AddCategoryModel'; // import CheckBoxIcon from '@mui/icons-material/CheckBox'\n// import CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank'\n// import IndeterminateCheckBoxIcon from '@mui/icons-material/IndeterminateCheckBox'\n// import ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown'\n// import ArrowRightIcon from '@mui/icons-material/ArrowRight'\n\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AllCategories(props) {\n  _s();\n\n  const [categoryName, setCategoryName] = useState('');\n  const [categoryImage, setCategoryImage] = useState('');\n  const [parentCategoryId, setParentCategoryId] = useState('');\n  const category = useSelector(state => state.category);\n  const [show, setShow] = useState(false);\n  const [checked, setChecked] = useState([]);\n  const [expanded, setExpanded] = useState([]);\n  const [checkedArray, setCheckedArray] = useState([]);\n  const [expandedArray, setExpandedArray] = useState([]);\n  const [updateCategoryModal, setUpdateCategoryModal] = useState(false);\n  const [deleteCategoryModal, setDeleteCategoryModal] = useState(false);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!category.loading) {\n      setShow(false);\n    }\n  }, [category.loading]);\n\n  const handleClose = () => {\n    const form = new FormData();\n\n    if (categoryName === '') {\n      alert('Category name is required');\n      setShow(false);\n      return;\n    }\n\n    form.append('name', categoryName);\n    form.append('parentId', parentCategoryId);\n    form.append('categoryImage', categoryImage);\n    dispatch(createCategory(form));\n    setCategoryName('');\n    setParentCategoryId('');\n    setShow(false);\n  };\n\n  const handleShow = () => setShow(true);\n\n  const displayCategories = categories => {\n    let Categories = [];\n\n    for (let category of categories) {\n      Categories.push({\n        label: category.name,\n        value: category._id,\n        children: category.children.length > 0 && displayCategories(category.children)\n      });\n    }\n\n    return Categories;\n  };\n\n  const createCategoryList = function (categories) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    for (let category of categories) {\n      options.push({\n        value: category._id,\n        name: category.name,\n        parentId: category.parentId,\n        type: category.type\n      });\n\n      if (category.children.length > 0) {\n        createCategoryList(category.children, options);\n      }\n    }\n\n    return options;\n  };\n\n  const handleCategoryImage = e => {\n    setCategoryImage(e.target.files[0]);\n  };\n\n  const updateCategory = () => {\n    updateCheckedAndExpandedCategories();\n    setUpdateCategoryModal(true);\n  };\n\n  const updateCheckedAndExpandedCategories = () => {\n    const categories = createCategoryList(category.categories);\n    const checkedArray = [];\n    const expandedArray = [];\n    checked.length > 0 && checked.forEach((categoryId, index) => {\n      const category = categories.find((category, _index) => categoryId === category.value);\n      category && checkedArray.push(category);\n    });\n    expanded.length > 0 && expanded.forEach((categoryId, index) => {\n      const category = categories.find((category, _index) => categoryId === category.value);\n      category && expandedArray.push(category);\n    });\n    setCheckedArray(checkedArray);\n    setExpandedArray(expandedArray);\n    console.log({\n      checked,\n      expanded,\n      categories,\n      checkedArray,\n      expandedArray\n    });\n  };\n\n  const handleCategoryInput = (key, value, index, type) => {\n    if (type === 'checked') {\n      const updatedCheckedArray = checkedArray.map((item, _index) => index === _index ? { ...item,\n        [key]: value\n      } : item);\n      setCheckedArray(updatedCheckedArray);\n    } else if (type === 'expanded') {\n      const updatedExpandedArray = expandedArray.map((item, _index) => index === _index ? { ...item,\n        [key]: value\n      } : item);\n      setExpandedArray(updatedExpandedArray);\n    }\n  };\n\n  const updateCategoryForm = () => {\n    const form = new FormData();\n    expandedArray.forEach((item, index) => {\n      form.append('_id', item.value);\n      form.append('name', item.name);\n      form.append('parentId', item.parentId ? item.parentId : '');\n      form.append('type', item.type);\n    });\n    checkedArray.forEach((item, index) => {\n      form.append('_id', item.value);\n      form.append('name', item.name);\n      form.append('parentId', item.parentId ? item.parentId : '');\n      form.append('type', item.type);\n    });\n    dispatch(updateCategories(form));\n    setUpdateCategoryModal(false);\n  };\n\n  const deleteCategory = () => {\n    updateCheckedAndExpandedCategories();\n    setDeleteCategoryModal(true);\n  };\n\n  const deleteCategories = () => {\n    const checkedIdsArray = checkedArray.map((item, index) => ({\n      _id: item.value\n    }));\n    const expandedIdsArray = expandedArray.map((item, index) => ({\n      _id: item.value\n    }));\n    const idsArray = expandedIdsArray.concat(checkedIdsArray);\n\n    if (checkedIdsArray.length > 0) {\n      dispatch(deleteCategoriesAction(checkedIdsArray)).then(result => {\n        if (result) {\n          dispatch(getCategory());\n          setDeleteCategoryModal(false);\n        }\n      });\n    }\n\n    setDeleteCategoryModal(false);\n  };\n\n  const displayDeleteCategoryModal = () => {\n    return /*#__PURE__*/_jsxDEV(ReusableModel, {\n      modalTitle: 'Confirm',\n      show: deleteCategoryModal,\n      handleClose: () => setDeleteCategoryModal(false),\n      buttons: [{\n        label: 'No',\n        color: 'primary',\n        onClick: () => {\n          alert('no');\n        }\n      }, {\n        label: 'Yes',\n        color: 'danger',\n        onClick: deleteCategories\n      }],\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Expanded Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), expandedArray.map((item, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: item.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Checked Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), checkedArray.map((item, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: item.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this);\n  };\n\n  const categoryList = createCategoryList(category.categories);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          style: {\n            display: 'flex'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            component: \"h1\",\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              marginLeft: 'auto',\n              backgroundColor: '#323232',\n              color: 'white',\n              fontSize: 'small'\n            },\n            onClick: handleShow,\n            children: \"Add category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(CheckboxTree, {\n          nodes: displayCategories(category.categories),\n          checked: checked,\n          expanded: expanded,\n          onCheck: checked => setChecked(checked),\n          onExpand: expanded => setExpanded(expanded) // icons={{\n          //   check: <CheckBoxIcon />,\n          //   uncheck: <CheckBoxOutlineBlankIcon />,\n          //   halfCheck: <IndeterminateCheckBoxIcon />,\n          //   expandClose: <ArrowRightIcon />,\n          //   expandOpen: <ArrowDropDownIcon />,\n          // }}\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: deleteCategory,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: updateCategory,\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddCategoryModel, {\n      show: show,\n      handleClose: () => setShow(false),\n      onSubmit: handleClose,\n      modalTitle: 'Add New Category',\n      categoryName: categoryName,\n      setCategoryName: setCategoryName,\n      parentCategoryId: parentCategoryId,\n      setParentCategoryId: setParentCategoryId,\n      handleCategortImage: handleCategoryImage,\n      categoryList: categoryList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UpdateCategoryModel, {\n      show: updateCategoryModal,\n      handleClose: () => setUpdateCategoryModal(false),\n      onSubmit: updateCategoryForm,\n      size: \"lg\",\n      modalTitle: 'Update Categories',\n      expandedArray: expandedArray,\n      checkedArray: checkedArray,\n      handleCategoryInput: handleCategoryInput,\n      categoryList: categoryList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), displayDeleteCategoryModal()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AllCategories, \"O70ExGEDlrdXwOjG7mMXYCOdNSo=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = AllCategories;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllCategories\");","map":{"version":3,"sources":["C:/Users/zubai/OneDrive/Documents/GitHub/janimotors1/admin-dashboard/src/views/pages/Category/Category.jsx"],"names":["React","useState","useEffect","useDispatch","useSelector","Grid","Box","createCategory","updateCategories","deleteCategories","deleteCategoriesAction","getCategory","ReusableModel","CheckboxTree","UpdateCategoryModel","AddCategoryModel","Button","Typography","AllCategories","props","categoryName","setCategoryName","categoryImage","setCategoryImage","parentCategoryId","setParentCategoryId","category","state","show","setShow","checked","setChecked","expanded","setExpanded","checkedArray","setCheckedArray","expandedArray","setExpandedArray","updateCategoryModal","setUpdateCategoryModal","deleteCategoryModal","setDeleteCategoryModal","dispatch","loading","handleClose","form","FormData","alert","append","handleShow","displayCategories","categories","Categories","push","label","name","value","_id","children","length","createCategoryList","options","parentId","type","handleCategoryImage","e","target","files","updateCategory","updateCheckedAndExpandedCategories","forEach","categoryId","index","find","_index","console","log","handleCategoryInput","key","updatedCheckedArray","map","item","updatedExpandedArray","updateCategoryForm","deleteCategory","checkedIdsArray","expandedIdsArray","idsArray","concat","then","result","displayDeleteCategoryModal","color","onClick","categoryList","display","marginLeft","backgroundColor","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Grid from '@mui/material/Grid'\r\nimport Box from '@mui/material/Box'\r\nimport {\r\n  createCategory,\r\n  updateCategories,\r\n  deleteCategories as deleteCategoriesAction,\r\n  getCategory,\r\n} from '../../../actions'\r\nimport ReusableModel from '../../../components/layouts/ReusableModel'\r\nimport CheckboxTree from 'react-checkbox-tree'\r\nimport 'react-checkbox-tree/lib/react-checkbox-tree.css'\r\nimport UpdateCategoryModel from './UpdateCategoryModel'\r\nimport AddCategoryModel from './AddCategoryModel'\r\n// import CheckBoxIcon from '@mui/icons-material/CheckBox'\r\n// import CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank'\r\n// import IndeterminateCheckBoxIcon from '@mui/icons-material/IndeterminateCheckBox'\r\n// import ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown'\r\n// import ArrowRightIcon from '@mui/icons-material/ArrowRight'\r\nimport Button from '@mui/material/Button'\r\nimport Typography from '@mui/material/Typography'\r\n\r\nexport default function AllCategories(props) {\r\n  const [categoryName, setCategoryName] = useState('')\r\n  const [categoryImage, setCategoryImage] = useState('')\r\n  const [parentCategoryId, setParentCategoryId] = useState('')\r\n  const category = useSelector((state) => state.category)\r\n  const [show, setShow] = useState(false)\r\n  const [checked, setChecked] = useState([])\r\n  const [expanded, setExpanded] = useState([])\r\n  const [checkedArray, setCheckedArray] = useState([])\r\n  const [expandedArray, setExpandedArray] = useState([])\r\n  const [updateCategoryModal, setUpdateCategoryModal] = useState(false)\r\n  const [deleteCategoryModal, setDeleteCategoryModal] = useState(false)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    if (!category.loading) {\r\n      setShow(false)\r\n    }\r\n  }, [category.loading])\r\n\r\n  const handleClose = () => {\r\n    const form = new FormData()\r\n\r\n    if (categoryName === '') {\r\n      alert('Category name is required')\r\n      setShow(false)\r\n      return\r\n    }\r\n\r\n    form.append('name', categoryName)\r\n    form.append('parentId', parentCategoryId)\r\n    form.append('categoryImage', categoryImage)\r\n    dispatch(createCategory(form))\r\n    setCategoryName('')\r\n    setParentCategoryId('')\r\n    setShow(false)\r\n  }\r\n  const handleShow = () => setShow(true)\r\n\r\n  const displayCategories = (categories) => {\r\n    let Categories = []\r\n    for (let category of categories) {\r\n      Categories.push({\r\n        label: category.name,\r\n        value: category._id,\r\n        children: category.children.length > 0 && displayCategories(category.children),\r\n      })\r\n    }\r\n    return Categories\r\n  }\r\n\r\n  const createCategoryList = (categories, options = []) => {\r\n    for (let category of categories) {\r\n      options.push({\r\n        value: category._id,\r\n        name: category.name,\r\n        parentId: category.parentId,\r\n        type: category.type,\r\n      })\r\n      if (category.children.length > 0) {\r\n        createCategoryList(category.children, options)\r\n      }\r\n    }\r\n    return options\r\n  }\r\n\r\n  const handleCategoryImage = (e) => {\r\n    setCategoryImage(e.target.files[0])\r\n  }\r\n\r\n  const updateCategory = () => {\r\n    updateCheckedAndExpandedCategories()\r\n    setUpdateCategoryModal(true)\r\n  }\r\n\r\n  const updateCheckedAndExpandedCategories = () => {\r\n    const categories = createCategoryList(category.categories)\r\n    const checkedArray = []\r\n    const expandedArray = []\r\n    checked.length > 0 &&\r\n      checked.forEach((categoryId, index) => {\r\n        const category = categories.find((category, _index) => categoryId === category.value)\r\n        category && checkedArray.push(category)\r\n      })\r\n    expanded.length > 0 &&\r\n      expanded.forEach((categoryId, index) => {\r\n        const category = categories.find((category, _index) => categoryId === category.value)\r\n        category && expandedArray.push(category)\r\n      })\r\n    setCheckedArray(checkedArray)\r\n    setExpandedArray(expandedArray)\r\n    console.log({ checked, expanded, categories, checkedArray, expandedArray })\r\n  }\r\n\r\n  const handleCategoryInput = (key, value, index, type) => {\r\n    if (type === 'checked') {\r\n      const updatedCheckedArray = checkedArray.map((item, _index) =>\r\n        index === _index ? { ...item, [key]: value } : item,\r\n      )\r\n      setCheckedArray(updatedCheckedArray)\r\n    } else if (type === 'expanded') {\r\n      const updatedExpandedArray = expandedArray.map((item, _index) =>\r\n        index === _index ? { ...item, [key]: value } : item,\r\n      )\r\n      setExpandedArray(updatedExpandedArray)\r\n    }\r\n  }\r\n\r\n  const updateCategoryForm = () => {\r\n    const form = new FormData()\r\n    expandedArray.forEach((item, index) => {\r\n      form.append('_id', item.value)\r\n      form.append('name', item.name)\r\n      form.append('parentId', item.parentId ? item.parentId : '')\r\n      form.append('type', item.type)\r\n    })\r\n    checkedArray.forEach((item, index) => {\r\n      form.append('_id', item.value)\r\n      form.append('name', item.name)\r\n      form.append('parentId', item.parentId ? item.parentId : '')\r\n      form.append('type', item.type)\r\n    })\r\n    dispatch(updateCategories(form))\r\n    setUpdateCategoryModal(false)\r\n  }\r\n\r\n  const deleteCategory = () => {\r\n    updateCheckedAndExpandedCategories()\r\n    setDeleteCategoryModal(true)\r\n  }\r\n  const deleteCategories = () => {\r\n    const checkedIdsArray = checkedArray.map((item, index) => ({\r\n      _id: item.value,\r\n    }))\r\n    const expandedIdsArray = expandedArray.map((item, index) => ({\r\n      _id: item.value,\r\n    }))\r\n    const idsArray = expandedIdsArray.concat(checkedIdsArray)\r\n\r\n    if (checkedIdsArray.length > 0) {\r\n      dispatch(deleteCategoriesAction(checkedIdsArray)).then((result) => {\r\n        if (result) {\r\n          dispatch(getCategory())\r\n          setDeleteCategoryModal(false)\r\n        }\r\n      })\r\n    }\r\n    setDeleteCategoryModal(false)\r\n  }\r\n\r\n  const displayDeleteCategoryModal = () => {\r\n    return (\r\n      <ReusableModel\r\n        modalTitle={'Confirm'}\r\n        show={deleteCategoryModal}\r\n        handleClose={() => setDeleteCategoryModal(false)}\r\n        buttons={[\r\n          {\r\n            label: 'No',\r\n            color: 'primary',\r\n            onClick: () => {\r\n              alert('no')\r\n            },\r\n          },\r\n          {\r\n            label: 'Yes',\r\n            color: 'danger',\r\n            onClick: deleteCategories,\r\n          },\r\n        ]}\r\n      >\r\n        <h5>Expanded Category</h5>\r\n        {expandedArray.map((item, index) => (\r\n          <span key={index}>{item.name}</span>\r\n        ))}\r\n        <h5>Checked Category</h5>\r\n        {checkedArray.map((item, index) => (\r\n          <span key={index}>{item.name}</span>\r\n        ))}\r\n      </ReusableModel>\r\n    )\r\n  }\r\n\r\n  const categoryList = createCategoryList(category.categories)\r\n\r\n  return (\r\n    <div>\r\n      {/* <Layout sidebar> */}\r\n      <Grid container>\r\n        <Grid item xs={12}>\r\n          <Box style={{ display: 'flex' }}>\r\n            <Typography variant=\"h4\" component=\"h1\">\r\n              Category\r\n            </Typography>\r\n            <Button\r\n              style={{\r\n                marginLeft: 'auto',\r\n                backgroundColor: '#323232',\r\n                color: 'white',\r\n                fontSize: 'small',\r\n              }}\r\n              onClick={handleShow}\r\n            >\r\n              Add category\r\n            </Button>\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid>\r\n        <Grid item xs={12}>\r\n          {/* <Box>\r\n              <ul>{displayCategories(category.categories)}</ul>\r\n            </Box> */}\r\n          <CheckboxTree\r\n            nodes={displayCategories(category.categories)}\r\n            checked={checked}\r\n            expanded={expanded}\r\n            onCheck={(checked) => setChecked(checked)}\r\n            onExpand={(expanded) => setExpanded(expanded)}\r\n            // icons={{\r\n            //   check: <CheckBoxIcon />,\r\n            //   uncheck: <CheckBoxOutlineBlankIcon />,\r\n            //   halfCheck: <IndeterminateCheckBoxIcon />,\r\n            //   expandClose: <ArrowRightIcon />,\r\n            //   expandOpen: <ArrowDropDownIcon />,\r\n            // }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid>\r\n        <Grid item xs={12}>\r\n          <button onClick={deleteCategory}>Delete</button>\r\n          <button onClick={updateCategory}>Edit</button>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* ----MODAL----- */}\r\n      <AddCategoryModel\r\n        show={show}\r\n        handleClose={() => setShow(false)}\r\n        onSubmit={handleClose}\r\n        modalTitle={'Add New Category'}\r\n        categoryName={categoryName}\r\n        setCategoryName={setCategoryName}\r\n        parentCategoryId={parentCategoryId}\r\n        setParentCategoryId={setParentCategoryId}\r\n        handleCategortImage={handleCategoryImage}\r\n        categoryList={categoryList}\r\n      />\r\n\r\n      <UpdateCategoryModel\r\n        show={updateCategoryModal}\r\n        handleClose={() => setUpdateCategoryModal(false)}\r\n        onSubmit={updateCategoryForm}\r\n        size=\"lg\"\r\n        modalTitle={'Update Categories'}\r\n        expandedArray={expandedArray}\r\n        checkedArray={checkedArray}\r\n        handleCategoryInput={handleCategoryInput}\r\n        categoryList={categoryList}\r\n      />\r\n\r\n      {displayDeleteCategoryModal()}\r\n      {/* </Layout> */}\r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}